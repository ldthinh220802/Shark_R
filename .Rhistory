2**3
x = 2
y= 4
x+y
x
x!
2!
da cai xong R
'da cai xong r'
install.packages(xlsx)
read.xlsx(thinh.xlsx)
install.packages("xlsx")
library(xlsx)
read.csv(thinh.csv)
Wiev(thinh.csv)
View(thinh.csv)
read.csv(thinh.csv)
doc = read.csv("thinh.csv")
View(doc)
doc = read.csv("thinh.csv")
View(doc)
plot(doc$City,doc$DS)
plot(doc$DS,doc$DTLD)
plot(doc$DS,doc$DTLD, xlab = "Dân số", ylab = "Độ tuổi lao động", main = "Biểu đồ độ tương quan giữa độ tuổi và độ tuổi lao động")
hist(doc$DS, xlab = "Dân Số",main = " Biểu đồ :))")
hist(doc$DS, xlab = "Dân Số",ylab = " Tần số",main = " Biểu đồ :))")
boxplot(doc$DS)
plot((doc$DS,doc$DTLD,main = "Biểu đồ phân tán ",))
plot((doc$DS,doc$DTLD,main = "Biểu đồ phân tán ",
plot((doc$DS,doc$DTLD,main = "Biểu đồ phân tán ",xlab = "Dân số ",ylab = "Độ tuổi trung bình",xlim = c(0,500),ylim= c(0,100),col = "red",pch = 25)
plot(doc$DS,doc$DTLD,main = "Biểu đồ phân tán ",xlab = "Dân số ",ylab = "Độ tuổi trung bình",xlim = c(0,500),ylim= c(0,100),col = "red",pch = 25)
plot(doc$DS,doc$DTLD,main = "Biểu đồ phân tán ",xlab = "Dân số ",ylab = "Số Người Lao động",xlim = c(0,500),ylim= c(0,500),col = "red",pch = 25)
x = c(10,20,35,24,70,55)
plot(x,type = 'p',ylim=c(0,100))
x = c(10,20,35,24,70,55) plot(x,type = 'p',ylim=c(0,100))
x = c(10,20,35,24,70,55)
plot(x,type = 'l',ylim=c(0,100))
plot(x,type="b",ylim = c(0,100),col="pink",lty = 2,lwd = 3)
x = 4
if (x > 3 ){x = x +1} else (x = x +10)
x
y = c(10,20,30,40,55,65,70)
s =1
for (i in length(y)) { s=s+i
}
s
y = c(10,20,30,40,55,65,70)
s = 0
for (i in length(y)) { s=s+y[i] }
s
y = c(10,20,30,40)
s=1
for (i in length(y)) {
}
y
s
for (i) in length(y) {
s=s*y[i]
}
y
s
y
s=0
for (i in 1:length(y)) {
s = s +y[i]
}
s
count_na = function(abc){
sum(is.na(abc))
}
count_na(c(1,3,a,c,a,6))
count_na = function(abc){
sum(is.na(abc))
}
count_na(c(1,3,"a","b","c",6))
matran = matrix(c(1,2,3,4,5,6)3,2)
matran = matrix(c(1,2,3,4,5,6),3,2)
matran
apply(matran,1,sum)
apply(matran,2,sum)
aplly(matran,2,mean)
apply(matran,2,mean)
apply(matran,2,count_na)
mat[2,1]= NA
list1 = (c(1,2.3),2,3,c(2,3))
list1 = list(c(1,2,3),2,3,c(4,5))
lapply(list1,length)
sapply(list1,length)
wing1 = 59
wing2 = 55
wing3 = 53.5
wing4 = 55
wing5 = 52.5
wing6 = 57.5
wing7 =53
wing8 = 55
sqrt(wing1)
wingcrd = c(wing1,wing2,wing3,wing4,wing5,wing6.wing7,wing8)
wingcrd = c(wing1,wing2,wing3,wing4,wing5,wing6,wing7,wing8)
wingcrd[1]
#hàm c là hàm  tạo 1 vector
wingcrd[1]
wingcrd[1:]
wingcrd[1:
wing1 = 59
wing2 = 55
wing3 = 53.5
wing4 = 55
wing5 = 52.5
wing6 = 57.5
wing7 =53
wing8 = 55
sqrt(wing1)
wingcrd = c(wing1,wing2,wing3,wing4,wing5,wing6,wing7,wing8)
#hàm c là hàm  tạo 1 vector
wingcrd[1]
wing1 = 59
wing2 = 55
wing3 = 53.5
wing4 = 55
wing5 = 52.5
wing6 = 57.5
wing7 =53
wing8 = 55
sqrt(wing1)
wingcrd = c(wing1,wing2,wing3,wing4,wing5,wing6,wing7,wing8)
#hàm c là hàm  tạo 1 vector
wingcrd[1]
# truy cập vào phần tử đầu tiên là số 1
wingcrd[-1]
# -1 là gọi ra hết các giá trị
wingcrd[2:4]
wingcrd[-2]
wingcrd[-1]
#liệt kê từ 2 cho tới 4
# thực hiện các phép toán trên vector
#sum,mean,max.min,median,vả,sd
sum(wingcrd)
mean(wingcrd) #giá trị trung bình
median(wingcrd)  # số trung vị
var(wingcrd)
sd(wingcrd)
bien = sum(wingcrd)
tarsus = c(22.3,19.7,20.8,20.3,20.8,21.5,20.6,21.5)
head = c(31.2,30.4,30.6,30.3,30.3,30.8,32.5,NA)
wt = c(9.5,13.8,14.8,15.2,15.5,15.6,15.6,15.7)
# muốn tính tổng của head mà loại ra các biến NA
sum(head,na.rm = TRUE)
#NA : not available
sum(head.na.rm = FALSE)
sum(head,na.rm = FALSE)
bigdata = c(wingcrd,tarsus,head,wt)
bigdata = c((wingcrd,tarsus,head,wt)8,4)
bigdata = c((wingcrd,tarsus,head,wt),8,4)
bigdata = c([wingcrd,tarsus,head,wt],8,4)
bigdata = c(wingcrd,tarsus,head,wt)
id = rep(c(1,2,3,4), each = 8)
id
id
a = seq(from = 1, to 4 ,by = 2)
a = seq(from = 1, to = 4 ,by = 2)
a
data = matrix(bigdata,8,4)
data
data = matrix(bigdata,8,4,xlab = "ca")
data = matrix(bigdata,8,4)
data
z = cbind(wingcrd,tarsus,head,wt)
z
#lấy số liệu của cột 1 :
z[,1]
#lấy giá trị khoảng M :n của cột x
z[2:5,2]
z[2,]
z[2,] #lấy số liệu của dòng
# lấy số liệu dòng số 2 , cột 1 và cột 2
z[2,1:2]
#lấy số liệu dòng 2 cột 1 và cột 2
z[2,c(1,2)]
z[c(1,5,8),c(2,4)]
# lấy dòng 1 , 5, 8 ứng với cột 2 4
z[c(1,5,8),c(2,4)]
dim(z)
nrow = dim(z)[1]
nrow
nrow
nrow = dim(z)[2]
nrow
ncol = dim(z)[2]
ncol
z2 = rbind(wingcrd,tarsus,head,wt)
z2 # kết nối theo hàng
# sử dùng hàm vector để kết nối số liệu
w = vector(length = 8)
w
dmat = matrix(nrow = 8.ncol = 4)
dmat = matrix(nrow = 8ncol = 4)
dmat = matrix(nrow = 8,ncol = 4)
dmat
dmat[,1]
dmat[,1] = c(59,55,53.5,55,52.5,57.5,53,55)
dmat
id = rep(c(1,2,3,4),each=8)n#
dmat
dmat[,2] = tarsus
dmat
dmat[,3] = head
dmat[,4] = wt
dmat
colnames(damt) = c(wingcrd,tarsus,head,wt)
colnames(dmat) = c(wingcrd,tarsus,head,wt)
colnames(dmat) = c("wingcrd","tarsus","head","wt")
dmat
# cách 2 để khai báo dữ liệu bằng ma trận
dmat2 = as.matrix(z)
z
y = z
yz
y
y = cbind(wingcrd,tarsus,head,wt)
z
y
# cách 2 để khai báo dữ liệu bằng ma trận
dmat2 = as.matrix(cbind(wingcrd,tarsus,head,wt))
damt2
dmat2
# sủ dụng ddataframe để khai báo dữ liệu :
dfrm = data.frame(wc =wingcrd,TS = tarsus,HD = head,W =wt)
dfrm
dfrm2 = data.frame(dfrm,wsqrt = sqrt(wt))
dfrm2
#kết nối dữ liệu bằng list function
x1 = c(1,2,3)
x2 = c("a","b","c","d")
x3 = 3
x4 = matrix(nrow = 2), ncol =2)
x4 = matrix(nrow = 2, ncol =2)
x4[,1] = c(1,2)
x4[,2] = c(3,4)
y = list(x1=x1, x2= x2,x3=x3, x4=x4)
y
alldata = list(bigdata = bigdata,ID =id2,Z=z)
alldata = list(bigdata = bigdata,ID =id,Z=z)
alldata
selection_sort = function(x){
n = length(x)
for (i in 1 : (n - 1)){
for (j in (i + 1) : n){
if (x[j] < x[i]){
temp = x[i]
x[i] = x[j]
x[j] = temp
}
}
}
return(x)}
dulieu = c(32, 17, 49, 98, 06, 25, 53, 61)
selection_sort(dulieu)
selfsort = function(x){
if (length(x)>1){
min = which.min(x)
c(x[min], selfsort(x[-min]))
}else x
}
selfsort(dulieu)
inserion_sort = function(x){
n = length(x)
for (i in 2:n){
temp = x[i]
j = i-1
while ((x[j]>temp)&&(j>0)){
x[(j+1)]=x[j]
j=j-1
}x[(j+1)]=temp}return(x)}
dulieu = c(32, 17, 49, 98, 06, 25, 53, 61)
inserion_sort(dulieu)
bubble_sort = set.seed(1)
dulieu = c(32, 17, 49, 98, 06, 25, 53, 61)
example <- function(x)
{
n <- length(x)
for (k in n:2)
{
i <- 1
while (i < k)
{
if (x[i] > x[i+1])
{
temp <- x[i+1]
x[i+1] <- x[i]
x[i] <- temp
}
i <- i+1
}
}
x
}
example(dulieu)
selection_sort = function(x){
n = length(x)
for (i in 1 : (n - 1)){
for (j in (i + 1) : n){
if (x[j] < x[i]){
temp = x[i]
x[i] = x[j]
x[j] = temp
}
}
}
return(x)}
dulieu = c(32, 17, 49, 98, 06, 25, 53, 61)
selection_sort(dulieu)
selfsort = function(x){
if (length(x)>1){
min = which.min(x)
c(x[min], selfsort(x[-min]))
}else x
}
selfsort(dulieu)
heapify <- function(array, n, i)
{
parent <- i
leftChild <- 2 * (i - 1) + 1
rightChild <- 2 * (i - 1) + 2
if ((leftChild < n) & (array[parent] < array[leftChild]))
{
parent <- leftChild
}
if ((rightChild < n) & (array[parent] < array[rightChild]))
{
parent <- rightChild
}
if (parent != i) {
array <- replace(array, c(i, parent), array[c(parent, i)])
array <- heapify(array, n, parent)
}
array
}
heapSort <- function(array)
{
n <- length(array)
for (i in floor(n / 2):1) {
array <- heapify(array, n, i)
}
for (i in n:1) {
array <- replace(array, c(i, 1), array[c(1, i)])
array <- heapify(array, i, 1)
}
array
}
array <- c(32, 17, 49, 98, 6, 25, 53, 61)
heapSort(array)
heapSort(array)
heapify <- function(array, n, i)
{
parent <- i
leftChild <- 2 * (i - 1) + 1
rightChild <- 2 * (i - 1) + 2
if ((leftChild < n) & (array[parent] < array[leftChild]))
{
parent <- leftChild
}
if ((rightChild < n) & (array[parent] < array[rightChild]))
{
parent <- rightChild
}
if (parent != i) {
array <- replace(array, c(i, parent), array[c(parent, i)])
array <- heapify(array, n, parent)
}
array
}
heapSort <- function(array)
{
n <- length(array)
for (i in floor(n / 2):1) {
array <- heapify(array, n, i)
}
for (i in n:1) {
array <- replace(array, c(i, 1), array[c(1, i)])
array <- heapify(array, i, 1)
}
array
}
array <- c(32, 17, 49, 98, 6, 25, 53, 61)
heapSort(array)
heapify <- function(array, n, i)
{
parent <- i
leftChild <- 2 * (i - 1) + 1
rightChild <- 2 * (i - 1) + 2
if ((leftChild < n) & (array[parent] < array[leftChild]))
{
parent <- leftChild
}
if ((rightChild < n) & (array[parent] < array[rightChild]))
{
parent <- rightChild
}
if (parent != i) {
array <- replace(array, c(i, parent), array[c(parent, i)])
array <- heapify(array, n, parent)
}
array
}
heapSort <- function(array)
{
n <- length(array)
for (i in floor(n / 2):1) {
array <- heapify(array, n, i)
}
for (i in n:1) {
array <- replace(array, c(i, 1), array[c(1, i)])
array <- heapify(array, i, 1)
}
array
}
array <- c(32, 17, 49, 98, 6, 25, 53, 61)
heapSort(array)
mmerge<-function(a,b) {
r<-numeric(length(a)+length(b))
ai<-1; bi<-1; j<-1;
for(j in 1:length(r)) {
if((ai<=length(a) && a[ai]<b[bi]) || bi>length(b)) {
r[j] <- a[ai]
ai <- ai+1
} else {
r[j] <- b[bi]
bi <- bi+1
}
}
r
}
mmergesort<-function(A) {
if(length(A)>1) {
q <- ceiling(length(A)/2)
a <- mmergesort(A[1:q])
b <- mmergesort(A[(q+1):length(A)])
mmerge(a,b)
} else {
A
}
}
x<-c(18, 16, 8, 7, 6, 3, 11, 9, 15, 1)
mmergesort(x)
